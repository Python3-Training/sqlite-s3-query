name: Test
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  download-coverage-reporter:
    runs-on: ubuntu-latest
    steps:
      - name: "Download coverage reporter"
        run: |
          mkdir -p ./reporter
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./reporter/cc-test-reporter
      - name: "Notify code climate of pending coverage upload"
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          chmod +x ./reporter/cc-test-reporter
          ./reporter/cc-test-reporter before-build
      - name: "Save reporter"
        uses: actions/upload-artifact@v3
        with:
          name: reporter
          path: ./reporter/cc-test-reporter

  # We want older SQLite amalgamation files, but they are not available to download,
  # so must be built from source. And they cannot be build on Windows, even for tests
  # that then compile the amalgamation on Windows
  create-sqlite-amalgamation:
    name: "Create SQLite amalgamation"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sqlite-url-version:
          - {version: "3042000", url: "https://www.sqlite.org/src/tarball/831d0fb2/SQLite-831d0fb2.tar.gz"}
          - {version: "3036000", url: "https://www.sqlite.org/src/tarball/5c9a6c06/SQLite-5c9a6c06.tar.gz"}
          - {version: "3007015", url: "https://www.sqlite.org/src/tarball/cd0b37c5/SQLite-cd0b37c5.tar.gz"}
    steps:
      - name: "Download SQLite source and build amalgamation"
        run: |
          wget -O sqlite3.tar.gz '${{ matrix.sqlite-url-version.url }}'
          mkdir sqlite3
          tar -zxvf sqlite3.tar.gz --strip-components=1 -C sqlite3
          cd sqlite3
          ./configure
          make sqlite3.c
      - name: "Save SQLite amalgamation"
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-${{ matrix.sqlite-url-version.version }}
          path: ./sqlite3/sqlite3.c

  test:
    name: Test
    needs: [download-coverage-reporter, create-sqlite-amalgamation]
    strategy:
      matrix:
        sqlite-version:
          - "3042000"
          - "3036000"
          - "3007015"
          - "default"
        os-and-python-version:
          - {os: "ubuntu-20.04", python: "3.6.7"}
          - {os: "ubuntu-20.04", python: "3.7.1"}
          - {os: "ubuntu-20.04", python: "3.8.0"}
          - {os: "ubuntu-20.04", python: "3.9.0"}
          - {os: "ubuntu-20.04", python: "3.10.0"}
          - {os: "ubuntu-20.04", python: "3.11.0"}
    runs-on: '${{ matrix.os-and-python-version.os }}'
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"
      - uses: "actions/setup-python@v4"
        with:
          python-version: '${{ matrix.os-and-python-version.python }}'
      - name: "Run MinIO"
        run: |
          ./start-services.sh
      - uses: actions/download-artifact@v3
        with:
          name: reporter
          path: ./reporter
      - name: "Load SQLite amalgamation"
        if: matrix.sqlite-version != 'default'
        uses: actions/download-artifact@v3
        with:
          name: sqlite-${{ matrix.sqlite-version }}
          path: .
      - name: "Compile SQLite from amalgamation"
        if: matrix.sqlite-version != 'default'
        run: |
          gcc -shared -fPIC -o libsqlite3.so.0 sqlite3.c
          echo "SQLITE3_VERSION=${{ matrix.sqlite-version }}" >> "$GITHUB_ENV"
          echo "LIBSQLITE3_PATH=${PWD}/libsqlite3.so.0" >> "$GITHUB_ENV"
      - name: "Install sqlite-s3-query and any dependencies"
        run: |
          pip install ".[dev]"
      - name: "Test"
        run: |
          coverage run -m unittest
          coverage xml
          chmod +x ./reporter/cc-test-reporter
          COVERAGE_FILE_NAME="./coverage/${{ matrix.os-and-python-version.python }}-${{ matrix.sqlite-version }}.json"
          ./reporter/cc-test-reporter format-coverage --output "$COVERAGE_FILE_NAME"
      - name: "Save code coverage"
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage/*.json

  upload:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/download-artifact@v3
      - name: "Upload coverage"
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          ls -R
          chmod +x ./reporter/cc-test-reporter
          ./reporter/cc-test-reporter sum-coverage ./coverage/*.json -p 24
          ./reporter/cc-test-reporter upload-coverage
